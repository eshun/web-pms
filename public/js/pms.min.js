!function (e) {
	function getCurScriptElement() {
		var curScriptElement = document.currentScript;
		if (!curScriptElement) {
			var t = document.scripts;
            curScriptElement = t[t.length - 1]
		}
		return curScriptElement
	}
	function bind(e, t, callF) {
		var n = e[t];
		e[t] = callF(n)
	}
	function eventTarget(e) {
		return "function" != typeof e ? e : (e.__injected__ || (e.__injected__ = function () {
				try {
					return e.apply(this, arguments)
				} catch (e) {
					throw mSubmitStack(e),
					w = !0,
					e
				}
			}), e.__injected__)
	}
	function getMessage(t) {
        if (!t)
            return null;
        var r = {};
        return e.XMLHttpRequest ? r = {
            name: t.name,
            message: t.message,
            fileName: t.fileName || t.sourceURL,
            lineNumber: t.lineNumber || t.line,
            columnNumber: t.columnNumber || t.column
        } : r.message = t.message, r ;
    }
	function getNotifyStacktrace() {
		var e;
		try {
			throw new Error("")
		} catch (t) {
			e = t.stack
		}
		if (e)
			return e = e.replace(/(.*?)fundebug(.*?)\.js(.*)\n?/gm, ""), e = e.replace(/^Error\n/g, ""), e = "generated-stack:\n" + e
	}
	function getErrorStacktrace() {
		for (var e, t = [], r = arguments.callee.caller.caller; r && t.length < 10; ) {
			var n = r.toString().match(/function\s*([\w\_$]+)?\s*\(/i);
			e = n && n[1] || "[anonymous]",
			t.push(e),
			r = r.caller
		}
		return "generated-stack:\n" + t.join("\n")
	}
	function mSubmitStack(e) {
		if (e) {
			var t = e.stack;
			var r = getMessage(e);
			mSubmitEvent({
				name: r.name || "uncaught error",
				message: r.message,
				fileName: r.fileName,
				lineNumber: r.lineNumber,
				columnNumber: r.columnNumber,
				stacktrace: t,
				severity: "error",
				type: "uncaught"
			})
		}
	}
	function winError(t) {
        if (!Params.silentResource && !t.message) {
            var r;
            r = t.target ? t.target : t.srcElement;
            var n = r && r.outerHTML;
            n && n.length > 200 && (n = n.slice(0, 200));
            var a = {
                type: "resourceError",
                target: {
                    outerHTML: n,
                    src: r && r.src,
                    tagName: r && r.tagName,
                    id: r && r.id,
                    className: r && r.className,
                    name: r && r.name,
                    type: r && r.type,
                    XPath: getXPath(r),
                    selector: getSelector(r),
                    timeStamp: t.timeStamp && t.timeStamp.toFixed(2)
                }
            };
            if (r.src !== e.location.href && (!r.src || !r.src.match(/.*\/(.*)$/) || r.src.match(/.*\/(.*)$/)[1]) && a.target.src && e.XMLHttpRequest) {
                var i = new XMLHttpRequest;
                i.open("HEAD", a.target.src),
                    i.send(),
                    i.onload = function (e) {
                        200 !== e.target.status && (a.target.status = e.target.status, a.target.statusText = e.target.statusText),
                            mSubmitEvent(a)
                    }
            }
        }
	}
	function getXPath(e) {
		for (var t = []; e && e.nodeType == Node.ELEMENT_NODE; e = e.parentNode) {
			var r,
			n = 0,
			a = !1;
			for (r = e.previousSibling; r; r = r.previousSibling)
				r.nodeType != Node.DOCUMENT_TYPE_NODE && r.nodeName == e.nodeName && ++n;
			for (r = e.nextSibling; r && !a; r = r.nextSibling)
				r.nodeName == e.nodeName && (a = !0);
			var i = (e.prefix ? e.prefix + ":" : "") + e.localName,
			o = n || a ? "[" + (n + 1) + "]" : "";
			t.splice(0, 0, i + o)
		}
		return t.length ? "/" + t.join("/") : null
	}
	function getSelector(e) {
		for (var t = []; e.parentNode; ) {
			if (e.id) {
				t.unshift("#" + e.id);
				break
			}
			if (e == e.ownerDocument.documentElement)
				t.unshift(e.tagName);
			else {
				for (var r = 1, n = e; n.previousElementSibling; n = n.previousElementSibling, r++);
				t.unshift(e.tagName + ":nth-child(" + r + ")")
			}
			e = e.parentNode
		}
		return t.join(" > ")
	}
	function f(e) {
		x.push(e),
		x.length > 20 && x.shift()
	}
	function winClick(t) {
        var r;
        r = t.target ? t.target : t.srcElement;
        var n = r && r.outerHTML;
        n && n.length > 200 && (n = n.slice(0, 200)),
            d = {
                type: "click",
                page: {
                    url: e.location.href,
                    title: document.title
                },
                detail: {
                    outerHTML: n,
                    tagName: r && r.tagName,
                    id: r && r.id,
                    className: r && r.className,
                    name: r && r.name
                },
                time: (new Date).getTime()
            },
            f(d);
        //点击
        if (r && "html body".indexOf(r.tagName.toLowerCase()) === -1) {
            mSubmitEvent({
                type: "click",
                url: e.location.href,
                title: document.title,
                target: {
                    outerHTML: n,
                    tagName: r && r.tagName,
                    id: r && r.id,
                    className: r && r.className,
                    name: r && r.name
                }
            });
        }
    }
	function event(a, b, d) {
        a.attachEvent ? a.attachEvent("on" + b, function (b) {
            d.call(a, b)
        }) : a.addEventListener && a.addEventListener(b, d, !0)
    }
	function d(e, t) {
		M = t;
		var r = {
			type: "navigation",
			detail: {
				from: e,
				to: t
			},
			time: (new Date).getTime()
		};
		f(r);
        //页面跳转
	}
	function submitConsole(t) {
		var r = console[t];
		console[t] = function () {
			var n = {
				type: "console",
				page: {
					url: e.location.href,
					title: document.title
				},
				detail: {
					level: t,
					arguments: Array.prototype.slice.apply(arguments).join(" ")
				},
				time: (new Date).getTime()
			};
			if (Params.silentConsole || f(n), "function" == typeof r) {
                if (r.apply)
                    r.apply(console, arguments);
                else {
                    var a = Array.prototype.slice.apply(arguments).join(" ");
                    r(a);
                }
            }
		}
	}
	function isSubmitHttp(e) {
		return !Params.silentHttp && ((0 !== e.detail.status || !/^file:\/\/\//.test(e.detail.url)) && 2 !== parseInt(e.detail.status / 100))
	}
	function mSubmitEvent(t) {
		if (!Params.silent) {
			var mParams = {
				version: "0.0.1",
                apikey: "",
                dm: "",
                userAgent: e.navigator.userAgent,
                cookieEnabled: e.navigator.cookieEnabled,
                javaEnabled: e.navigator.javaEnabled(),
                language: e.navigator.language || e.navigator.browserLanguage || e.navigator.systemLanguage || e.navigator.userLanguage || "",
				url: e.location.href,
				title: document.title,
                referrer: document.referrer && document.referrer !== location.href ? document.referrer : '',
				//appVersion: CurScriptElement.getAttribute("appversion") || Params.appversion,
				metaData: t.metaData || Params.metaData,
				name: t.name,
				time: (new Date).getTime(),
				message: t.message,
				fileName: t.fileName,
				lineNumber: t.lineNumber,
				columnNumber: t.columnNumber,
				stacktrace: t.stacktrace,
				type: t.type,
				severity: t.severity,
				target: t.target,
				req: t.req,
				res: t.res,
				breadcrumbs: x
			};
            mParams = Object.assign(mParams, t);
            mParams.userAgent && mParams.userAgent.match(/Googlebot/) || filters(mParams) || SubmitEvent(mParams)
		}
	}
	function filters(e) {
		var t = Params.filters;
		if (!t || !t.length)
			return !1;
		for (var r = 0; r < t.length; r++)
			if (extend(e, t[r]))
				return !0;
		return !1
	}
	function extend(e, t) {
		if (!e)
			return !1;
		if (Object.keys && !Object.keys(t).length)
			return !1;
		for (var r in t)
			if (t.hasOwnProperty(r))
				if (t[r].constructor === RegExp) {
					if (!t[r].test(e[r]))
						return !1
				} else {
					if (t[r].constructor !== Object)
						return !1;
					if (!extend(e[r], t[r]))
						return !1
				}
		return !0
	}
	function ToJson(e) {
		if ("undefined" != typeof JSON)
			return JSON.stringify(e);
		if (e instanceof Array) {
			for (var t = [], r = 0; r < e.length; r++)
				t.push(ToJson(e[r]));
			return "[" + t.join(",") + "]"
		}
		var n = [];
		for (var a in e)
			if (e.hasOwnProperty(a)) {
				var i = '"' + a + '":',
				o = e[a];
				o && ("object" == typeof o ? i += ToJson(o) : "number" == typeof o ? i += o : i = i + '"' + o.replace(/\n/g, "\\n") + '"', n.push(i))
			}
		return "{" + n.join(",") + "}"
	}
	function EventToJson(e) {
		var t;
		try {
			t = ToJson(e)
		} catch (r) {
			delete e.metaData;
			try {
				t = ToJson(e)
			} catch (e) {
				return
			}
		}
		return t
	}
	function SubmitEvent(t) {
        var r = EventToJson(t);
        if (r) {
            var n = k;
            if (e.XMLHttpRequest && e.atob) {
                var xhr = new XMLHttpRequest;
                xhr.timeout = 3000;
                xhr.open("POST", n);
                xhr.onload = function (e) {
                    if (this.status == 200 || this.status == 304) {
                        x = [];
                    }
                };
                xhr.setRequestHeader("Content-Type", "application/json");
                xhr.send(r);
            } else {
                (new Image).src = n + "?event=" + encodeURIComponent(r);
            }
        }
    }
    function SubmitPerformance () {
        setTimeout(() => { //loadEventEnd返回值0的处理
            //增加页面性能及其资源性能
            if (!window.performance && !window.performance.getEntries) return false;

			let resource = performance.getEntriesByType('resource');
			let pushArr = [], ajaxMsg = [];
			let resourceTime = 0;
			resource.forEach((item) => {
				let json = {
					name: item.name,
					method: 'GET',
					type: item.initiatorType,
					duration: item.duration.toFixed(2) || "0.00",
					decodedBodySize: item.decodedBodySize || 0,
					nextHopProtocol: item.nextHopProtocol,
				};
				for (let i = 0, len = ajaxMsg.length; i < len; i++) {
					if (ajaxMsg[i][1] === item.name) {
						json.method = ajaxMsg[i][0] || 'GET';
					}
				}
				resourceTime += parseInt(item.duration);
				pushArr.push(json);
			});

			/*---------------------------------统计页面性能-----------------------------------*/
			let timing = performance.timing;
			// DNS 缓存时间
			let appcache = timing.domainLookupStart - timing.fetchStart || 0;
			// DNS解析时间
			let dnsTime = timing.domainLookupEnd - timing.domainLookupStart || 0;
			//TCP建立时间
			let tcpTime = timing.connectEnd - timing.connectStart || 0;
			// 白屏时间
			let whiteTime = timing.responseStart - timing.navigationStart || 0;
			//dom渲染完成时间
			let domTime = timing.domContentLoadedEventEnd - timing.domLoading || 0;
			//页面onload时间
			let loadTime = timing.loadEventEnd - timing.navigationStart || 0;
			// 页面准备时间
			let readyTime = timing.fetchStart - timing.navigationStart || 0;
			// 页面重定向时间
			let redirectTime = timing.redirectEnd - timing.redirectStart || 0;
			// unload时间
			let unloadTime = timing.unloadEventEnd - timing.unloadEventStart || 0;
			//request请求耗时
			let requestTime = timing.responseEnd - timing.requestStart || 0;
			//页面解析dom耗时
			let analysisDomTime = timing.domComplete - timing.domLoading || 0;//timing.domInteractive

			let pageTimes = {
				dnsTime: dnsTime,
				tcpTime: tcpTime,
				whiteTime: whiteTime,
				domTime: domTime,
				loadTime: loadTime,
				readyTime: readyTime,
				redirectTime: redirectTime,
				unloadTime: unloadTime,
				requestTime: requestTime,
				analysisDomTime: analysisDomTime,
				resourceTime: resourceTime
			};
			mSubmitEvent({
				type: "performance",
				url: e.location.href,
				title: document.title,
				resources: pushArr,
				pageTimes: pageTimes
			});

		}, 0);
    }
	var k = "http://localhost:8080/javascript/event", Params = {}, w = !1,x = [],apikey='{apikey}',dm='{dm}',
	CurScriptElement = getCurScriptElement();

	Params.silent = CurScriptElement.getAttribute("silent") || !1;
	Params.silentResource = CurScriptElement.getAttribute("silentResource") || !1;
	Params.silentHttp = CurScriptElement.getAttribute("silentHttp") || !1;
	Params.silentConsole = Params.silentConsole || CurScriptElement.getAttribute("silentConsole") || !1;

	bind(e, "onerror", function () {
		return function (t, r, n, a, o) {
			if (w)
				return void(w = !1);
			void 0 === a && e.event && (a = e.event.errorCharacter);
			var s;
			s = r && r !== e.location.href ? r : null;
			var l = getMessage(o);
			return mSubmitEvent({
				message: t,
				lineNumber: n,
				columnNumber: a,
				fileName: s || l && l.fileName,
				name: l && l.name || "uncaught error",
				stacktrace: o && o.stack || getErrorStacktrace(),
				severity: "error",
				type: "uncaught"
			}),
			!1
		}
	});
	var H = !0;
	if (e.atob) {
		if (e.ErrorEvent)
			try {
				e.ErrorEvent.prototype.hasOwnProperty("error") && (H = !1)
			} catch (e) {}
	} else {
        H = !1;
	}
	"EventTarget Window Node ApplicationCache AudioTrackList ChannelMergerNode CryptoOperation EventSource FileReader HTMLUnknownElement IDBDatabase IDBRequest IDBTransaction KeyOperation MediaController MessagePort ModalWindow Notification SVGElementInstance Screen TextTrack TextTrackCue TextTrackList WebSocket WebSocketWorker Worker XMLHttpRequest XMLHttpRequestEventTarget XMLHttpRequestUpload".replace(/\w+/g, function (t) {
		if (H) {
			var a = e[t] && e[t].prototype;
			a && a.hasOwnProperty && a.hasOwnProperty("addEventListener") && (r(a, "addEventListener", function (e) {
					return function (t, r, a, i) {
						return r && r.handleEvent && (r.handleEvent = n(r.handleEvent)),
						e.call(this, t, eventTarget(r), a, i)
					}
				}), bind(a, "removeEventListener", function (e) {
					return function (t, r, a) {
						return e.call(this, t, r, a),
						e.call(this, t, eventTarget(r), a)
					}
				}))
		}
	}),
	Params.log = function (e, t, r) {
        if (e) {
            e.console && console.log(r);
            mSubmitEvent({
                name: e || r && r.name,
                message: t || r && r.message,
                severity: r && r.message || "warning",
                stacktrace: getNotifyStacktrace(),
                type: "notification",
                metaData: r && r.metaData
            });
        }
    };
	Params.log.err = function (t, r) {
		if (t) {
			e.console && console.error(t);
			var n = getMessage(t);
			mSubmitEvent({
				name: n.name || r && r.name || "caught error",
				message: n.message || r && r.message,
				stacktrace: t.stack,
				fileName: n.fileName,
				lineNumber: n.lineNumber,
				columnNumber: n.columnNumber,
				severity: r && r.severity || "error",
				type: "caught",
				metaData: r && r.metaData
			})
		}
	};
	Params.log.httpErr = function (e, t, r) {
		mSubmitEvent({
			type: "httpError",
			req: e,
			res: t,
			metaData: r && r.metaData
		})
	};

	e.addEventListener && e.addEventListener("unhandledrejection", function (e) {//是针对node.js, ES6的Promise 中的吃掉的错误
		Params.log.err(e.reason)
	});
	e.addEventListener && e.addEventListener("error", winError, !0);//监控资源加载错误(img,script,css,以及jsonp)
	e.addEventListener ? e.addEventListener("click", winClick, !0) : document.attachEvent("onclick", winClick);//监控点击行为事件
	var M = {
		url: e.location.href
	};
	document.addEventListener ? document.addEventListener("DOMContentLoaded", function () {
		M = {
			url: e.location.href,
			title: document.title
		}
	}) : document.attachEvent("onreadystatechange", function () {
		M = {
			url: e.location.href,
			title: document.title
		}
		if(document.readyState === "complete") {

        }
	});
    e.addEventListener("load", function () {
        var script = document.createElement('script');
        script.setAttribute('type', 'text/javascript');
        script.innerHTML="SubmitPerformance();";

        //document.body.appendChild(script); //在第原来的第一个元素之前插入
        SubmitPerformance()
    });

	var Popstate = e.onpopstate;//浏览器点击回退按钮时触发的事件
	e.onpopstate = function () {
		var t = {
			url: e.location.href
		};
		if (M.title || (M.title = document.title), M.url !== t.url && d(M, t), R)
			return Popstate.apply(this, arguments)
	};
	var PushState = e.history.pushState;
	e.history.pushState = function () {//浏览器历史状态发生变化
		M = {
			url: e.location.href,
			title: document.title
		};
		var t = {};
		if (3 === arguments.length && (t.url = arguments[2]), M.url !== t.url && d(M, t), S)
			return PushState.apply(this, arguments)
	};
	var Hashchange = e.onhashchange;
	e.onhashchange = function () {//浏览器URL的片段标识符更改事件
		var t = {
			url: e.location.href,
			title: document.title
		};
		if (M.url !== t.url && d(M, t), A)
			return Hashchange.apply(this, arguments)
	};
	for (var j = ["log", "warn", "error", "debug", "info"], q = 0; q < j.length; q++)
		e.console && submitConsole(j[q]);
	var O = !1;
	if (e.XMLHttpRequest) {
		var _ = XMLHttpRequest.prototype;
		if (!_)
			return;
		var C,	X,	F,	P = _.open;
		_.open = function (e, t) {
			C = e,
			X = t,
			F = (new Date).getTime();
			try {
				P.apply(this, arguments)
			} catch (e) {
				O = !0,
				Params.log.err(e, {
					metaData: {
						description: "XMLHttpRequest请求失败(如果是拒绝访问，则是由于浏览器跨域限制)",
						method: C,
						httpUrl: X
					}
				})
			}
		};
		var I = _.send;
		_.send = function () {
			if (O)
				return void(O = !1);
			var t = this,
			r = t.onreadystatechange;
			t.onreadystatechange = function () {
				if (4 === t.readyState && X != k) {
					var n = (new Date).getTime() - F,
					a = {
						type: "XMLHttpRequest",
						page: {
							url: e.location.href
						},
						detail: {
							method: C,
							url: t.responseURL || X,
							status: t.status,
							statusText: t.statusText
						},
						elapsedTime: n,
						time: F
					};
					if (isSubmitHttp(a)) {
						var i = {
							method: a.detail.method,
							url: a.detail.url
						},
						o = {
							status: t.status,
							statusText: t.statusText,
							response: t.response,
							elapsedTime: n
						};
						Params.log.httpErr(i, o);
					}
					f(a);
                    //网络请求
				}
				r && r.apply(this, arguments)
			},
			I.apply(this, arguments)
		}
	}
	if (e.fetch) {
		var U = e.fetch;
		e.fetch = function (t, r) {
			var n = (new Date).getTime();
			return U.apply(this, arguments).then(function (t) {
				var a = (new Date).getTime() - n,
				i = {
					type: "fetch",
					page: {
						url: e.location.href,
						title: document.title
					},
					detail: {
						method: r && r.method || "GET",
						url: t.url,
						status: t.status,
						statusText: t.statusText
					},
					elapsedTime: a,
					time: n
				};
				if (isSubmitHttp(i)) {
					var o = {
						method: i.detail.method,
						url: i.detail.url
					},
					u = {
						status: t.status,
						statusText: t.statusText,
						elapsedTime: a
					};
					Params.log.httpErr(o, u);
				}
                //网络请求
				return f(i), t;
			})
		}
	}
	var W = "function" == typeof define,
	$ = "undefined" != typeof module && module.exports;
	W ? define(L) : $ && (module.exports = L);
}(window);